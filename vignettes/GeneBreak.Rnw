%\VignetteIndexEntry{GeneBreak}
%\VignetteDepends{GeneBreak}
%\VignetteKeywords{Recurrent gene break detection on copy number data from aCGH or sequencing.}
%\VignettePackage{GeneBreak}
%\VignetteEngine{utils::Sweave}

\documentclass{article}

\usepackage[colorlinks=true,linkcolor=black,citecolor=black,urlcolor=blue]{
  hyperref}

\begin{document}
\SweaveOpts{concordance=TRUE}

\newcommand{\pkg}[1]{\texttt{#1}}
\newcommand{\code}[1]{\texttt{#1}}

\title{Introduction to GeneBreak}
\author{Evert van den Broek\footnote{email@email.com} \& Stef van Lieshout}
\maketitle
\begin{center}
  Department of Pathology \\*
  VU University Medical Center \\*
  The Netherlands, Amsterdam \\*
\end{center}

\tableofcontents

\clearpage

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\section{Running GeneBreak}

This is a short tutorial on how to use the \pkg{GeneBreak} package. It describes an example workflow which uses included copy number data of one chromosome from 200 aCGH samples. Let's start by loading the package.

<<loadingPackage>>=
library(GeneBreak)
@

<<settingOptions,echo=FALSE>>=
options("GeneBreak::verbose"=NA)
options(width=40)
@

\subsection{Detect breakpoints from copy-number data}

Copy number data can be loaded in two ways. Either from a cghCall/QDNAseq object (ouput of bioconductor packages CGHcall or QDNAseq) or by providing a data.frame with at least 5 columns: Chromosome, Start, End and FeatureName (usually probe identifier). Note: when using the data.frame input the column names must be exactly as described here and in the same order! In this tutorial we will use a built-in dataset of chromosome 20:

%------------------------------------------------------------
\subsubsection{Loading cghCall object}
%------------------------------------------------------------

<<loadingCopynumberData>>=
data( "copynumber.data.chr20" )
@

By inspecting the dataset, we see that we are dealing with an R object of class "cghCall" with 3653 features (aCGH probes in this case) and 200 samples.

<<displayCopynumberData>>=
copynumber.data.chr20
@

<<getBreakpoints>>=
breakpoints <- getBreakpoints( data = copynumber.data.chr20 )
@

%------------------------------------------------------------
\subsubsection{Loading data from data.frame()}
%------------------------------------------------------------

Although we recommend the usage of either \code{QDNAseq} (for sequencing data) or \code{CGHcall} (for aCGH data) as a precursor for GeneBreak, there is a possibilty of using a \code{data.frame()} as input. This allows for the analysis of data from any pipeline by importing a text file into R.

Here we use the output of CGHcall to output two data.frames() with segment and (optionally) call values. These can be used as input instead of a cghCall or QDNAseq object in \code{getBreakpoints}.
<<getBreakpointsAlternative, eval=FALSE>>=
library(CGHcall)
cgh <- copynumber.data.chr20
segmented <- data.frame( Chromosome=chromosomes(cgh), Start=bpstart(cgh),
 End=bpend(cgh), FeatureName=featureNames(cgh), segmented(cgh))
called <- data.frame( Chromosome=chromosomes(cgh), Start=bpstart(cgh),
 End=bpend(cgh), FeatureName=featureNames(cgh), calls(cgh))
breakpoints <- getBreakpoints( data = segmented, data2 = called )
@

%------------------------------------------------------------
\subsection{Loading gene annotation data}
%------------------------------------------------------------

Then we need to obtain gene annotations. For hg18 (and hg19, hg38) reference sequence these are included and can be loaded:

<<loadingAnnotation>>=
data( "ens.gene.ann.hg18" )
@

Inspect the annotation.

\begin{Schunk}
\begin{Sinput}
> head( ens.gene.ann.hg18 )
      Gene           EnsID Chromosome  Start    End   band strand
MIRN1302-2 ENSG00000221311          1  20229  20366 p36.33      1
   FAM138E ENSG00000222027          1  24417  25944 p36.33     -1
   FAM138E ENSG00000222003          1  24417  25944 p36.33     -1
   FAM138A ENSG00000222003          1  24417  25944 p36.33     -1
     OR4F5 ENSG00000177693          1  58954  59871 p36.33      1
    OR4F29 ENSG00000177799          1 357522 358460 p36.33      1
\end{Sinput}
\end{Schunk}

%------------------------------------------------------------
\subsection{Breakpoint selection by filtering}
%------------------------------------------------------------

Next we filter breakpoints. Different filters can be set with different threshold. Default here is "deltaSeg" filter with a threshold of 0.2. This means that only breakpoints which... 

<<bpFilter>>=
breakpointsFiltered <- bpFilter( breakpoints )
@

Next we will add the gene annotation information to the GeneBreak object. No analysis is done here yet.

%------------------------------------------------------------
\subsection{Detection of gene associated breaks}
%------------------------------------------------------------

<<addGeneAnnotation>>=
breakpointsAnnotated <- addGeneAnnotation( breakpointsFiltered, ens.gene.ann.hg18 )
@

Next we perform the gene analysis. This overlaps the genomic locations of the genes with the copy number data to find breakpoints within genes.

<<bpGenes>>=
breakpointGenes <- bpGenes( breakpointsAnnotated )
@

Next we determine the significantly recurring breakpoints. This be done at the "gene" or "feature" level and using one of two different methods ("Benjamini Hochberg" or "Gilbert"). The advantage of using... NOTE: when running bpStats() many warnings can be generated by a function (glm.fit) of a dependancy package, this does not harm the analysis.

<<bpStats>>=
breakpointStatistics <- bpStats( breakpointGenes )
@


<<showStatsObject,eval=FALSE>>=
breakpointStatistics
@

This will return an object of class \code{CopyNumberBreakPointGenes}.

By using recurrentGenes() we can observe the recurrent affected genes.

<<recurrentGenes>>=
head( recurrentGenes( breakpointStatistics ) )
@

%------------------------------------------------------------
\subsection{Plotting the frequencies of breakpoint locations}
%------------------------------------------------------------

<<echo=FALSE>>=
png("bpPlot.png")
@
<<label=bpPlot>>=
bpPlot( breakpointStatistics )
@
<<echo=FALSE, results=hide>>=
dev.off()
@

\begin{figure}[h]
  \centering
  \includegraphics{bpPlot}
  \caption{Caption}
  \label{fig:bpPlot}
\end{figure}


\clearpage

\section{Storage of R objects}
At any time during the analysis, the GeneBreak objects (and any R objects for that matter) can be saved to disk with:
\code{saveRDS}, and in the future be read from the local file with
\code{loadRDS}

\section{Downloading Gene Annotations}

This section describes the steps taken to create the gene annotations used in this package. It may serve as a start for creating your own if required for whatever reason.

<<createAnnotationExample,eval=FALSE>>=
# gene annotations obtained via Biomart. 
# HUGO gene names (HGNC symbol), Ensembl_ID and chromosomal location

# Used (and most) recent releases:
# HG18: release54
# HG19: release75
# HG38: release80 (date: 150629)

library(biomaRt)

ensembl54 = useMart( host='may2009.archive.ensembl.org', biomart='ENSEMBL_MART_ENSEMBL', dataset="hsapiens_gene_ensembl" )
ensembl75 = useMart( host='feb2014.archive.ensembl.org', biomart='ENSEMBL_MART_ENSEMBL', dataset="hsapiens_gene_ensembl" )
ensembl80 = useMart( "ensembl", dataset="hsapiens_gene_ensembl" )

createAnnotationFile <- function( biomartVersion ) {
  biomart_result <- getBM(attributes =  c("hgnc_symbol", "ensembl_gene_id", "chromosome_name",  "start_position", "end_position", "band", "strand"), mart = biomartVersion)

  biomart_result[ ,3] <- as.vector( biomart_result[ ,3] )
  biomart_result$chromosome_name[ biomart_result$chromosome_name=="X" ] <- "23"
  biomart_result$chromosome_name[ biomart_result$chromosome_name=="Y" ] <- "24"
  
  biomart_genes <-biomart_result[ which(biomart_result[ ,1]!="" & biomart_result[ ,3] %in% c(1:24)) , ]
  colnames(biomart_genes)[1:5]<-c("Gene","EnsID","Chromosome","Start","End")
  
  cat( c("Biomart version:", biomartVersion@host, "including:", dim(biomart_genes)[1], "genes\n") ) 
  return( biomart_genes )
}

ens.gene.ann.hg18 <- createAnnotationFile( ensembl54 )
ens.gene.ann.hg19 <- createAnnotationFile( ensembl75 )
ens.gene.ann.hg38 <- createAnnotationFile( ensembl80 )

@

\clearpage

\section{Session Information}

The version number of R and packages loaded for generating the vignette were:

<<sessionInfo,echo=FALSE>>=
sessionInfo()
@

\end{document}

% EOF
